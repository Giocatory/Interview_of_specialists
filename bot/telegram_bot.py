import os
import requests
from telegram import Update, ReplyKeyboardRemove
from telegram.ext import (
    Application, CommandHandler, MessageHandler, 
    filters, ContextTypes, ConversationHandler
)
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_BASE_URL = "http://127.0.0.1:8000/api"  # URL –≤–∞—à–µ–≥–æ FastAPI
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_BOT_TOKEN = "81....."

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
START, POSITION, INTERVIEW = range(3)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class TelegramBot:
    def __init__(self):
        self.application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        self.setup_handlers()

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""
        user = update.message.from_user
        context.user_data['user_id'] = str(user.id)
        
        await update.message.reply_text(
            "üß† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ù–µ–π—Ä–æ-HR –±–æ—Ç!\n\n"
            "–Ø –ø—Ä–æ–≤–µ–¥—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –∏ –¥–∞–º –ø–æ–¥—Ä–æ–±–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /interview\n"
            "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /history",
            reply_markup=ReplyKeyboardRemove()
        )
        return START

    async def start_interview(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è"""
        try:
            user_id = context.user_data.get('user_id')
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —á–µ—Ä–µ–∑ API
            response = requests.post(f"{API_BASE_URL}/start_interview", json={
                "start": True,
                "user_id": user_id,
                "platform": "telegram"
            })
            
            if response.status_code == 200:
                data = response.json()
                context.user_data['session_id'] = data['session_id']
                
                await update.message.reply_text(
                    data['message'],
                    reply_markup=ReplyKeyboardRemove()
                )
                return POSITION
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return START
        except Exception as e:
            logger.error(f"Error starting interview: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return START

    async def set_position(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è"""
        try:
            position = update.message.text
            session_id = context.user_data.get('session_id')
            user_id = context.user_data.get('user_id')
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —á–µ—Ä–µ–∑ API
            response = requests.post(f"{API_BASE_URL}/set_position", json={
                "session_id": session_id,
                "position": position,
                "user_id": user_id
            })
            
            if response.status_code == 200:
                data = response.json()
                context.user_data['current_question'] = 1
                context.user_data['total_questions'] = data['total_questions']
                context.user_data['position'] = data['position']
                
                await update.message.reply_text(
                    f"üéØ –ü–æ–∑–∏—Ü–∏—è: {data['position']}\n"
                    f"üìä –í–æ–ø—Ä–æ—Å {data['current_question']} –∏–∑ {data['total_questions']}:\n\n"
                    f"{data['question']}",
                    reply_markup=ReplyKeyboardRemove()
                )
                return INTERVIEW
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ–∑–∏—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return POSITION
        except Exception as e:
            logger.error(f"Error setting position: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ–∑–∏—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return POSITION

    async def handle_answer(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
        try:
            answer = update.message.text
            session_id = context.user_data.get('session_id')
            user_id = context.user_data.get('user_id')

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ API
            response = requests.post(f"{API_BASE_URL}/answer_question", json={
                "session_id": session_id,
                "answer": answer,
                "user_id": user_id
            })

            if response.status_code == 200:
                data = response.json()

                if data.get('interview_complete'):
                    # –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
                    feedback = data['feedback']

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∏–¥–±—ç–∫ –æ—à–∏–±–∫–æ–π
                    if "–û—à–∏–±–∫–∞:" in feedback:
                        await update.message.reply_text(
                            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.\n\n"
                            "–î–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /interview",
                            reply_markup=ReplyKeyboardRemove()
                        )
                        return START

                    # –†–∞–∑–±–∏–≤–∞–µ–º —Ñ–∏–¥–±—ç–∫ –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è Telegram
                    if len(feedback) > 4096:
                        for i in range(0, len(feedback), 4096):
                            part = feedback[i:i + 4096]
                            await update.message.reply_text(part)
                    else:
                        await update.message.reply_text(feedback)

                    await update.message.reply_text(
                        "‚úÖ –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n"
                        "–î–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /interview\n"
                        "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /history",
                        reply_markup=ReplyKeyboardRemove()
                    )
                    return START
                else:
                    # –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
                    context.user_data['current_question'] = data['current_question']

                    await update.message.reply_text(
                        f"üìä –í–æ–ø—Ä–æ—Å {data['current_question']} –∏–∑ {data['total_questions']}:\n\n"
                        f"{data['question']}",
                        reply_markup=ReplyKeyboardRemove()
                    )
                    return INTERVIEW
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return INTERVIEW
        except Exception as e:
            logger.error(f"Error handling answer: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return INTERVIEW

    async def show_history(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π"""
        try:
            user_id = context.user_data.get('user_id')
            
            response = requests.get(f"{API_BASE_URL}/user/{user_id}/sessions")
            
            if response.status_code == 200:
                data = response.json()
                sessions = data.get('sessions', [])
                
                if not sessions:
                    await update.message.reply_text("üìù –£ –≤–∞—Å –µ—â–µ –Ω–µ –±—ã–ª–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π.")
                    return START
                
                message = "üìã –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π:\n\n"
                
                for session in sessions[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π
                    status = "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ" if session['status'] == 'completed' else "üü° –í –ø—Ä–æ—Ü–µ—Å—Å–µ"
                    date = datetime.fromisoformat(session['created_at'].replace('Z', '+00:00')).strftime("%d.%m.%Y %H:%M")
                    message += f"‚Ä¢ {session['position']} - {status}\n"
                    message += f"  –î–∞—Ç–∞: {date}\n"
                    if session['status'] == 'completed':
                        message += f"  –í–æ–ø—Ä–æ—Å–æ–≤: {len(session['questions'])}\n\n"
                
                await update.message.reply_text(message)
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏.")
        except Exception as e:
            logger.error(f"Error showing history: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏.")
        
        return START

    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û—Ç–º–µ–Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è"""
        await update.message.reply_text(
            "–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler("start", self.start)],
            states={
                START: [
                    CommandHandler("interview", self.start_interview),
                    CommandHandler("history", self.show_history),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.start)
                ],
                POSITION: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.set_position)
                ],
                INTERVIEW: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_answer)
                ],
            },
            fallbacks=[CommandHandler("cancel", self.cancel)],
        )

        self.application.add_handler(conv_handler)

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        self.application.run_polling()

if __name__ == "__main__":
    if not TELEGRAM_BOT_TOKEN:
        print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ environment variables")
        print("‚ùå –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è TELEGRAM_BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ .env —Ñ–∞–π–ª–µ")
        exit(1)
    
    bot = TelegramBot()
    bot.run()